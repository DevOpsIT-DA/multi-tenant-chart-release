{{- if .Values.aws.ecr.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-ecr-credentials-init

spec:
  template:
    spec:
      serviceAccountName: ecr-secret-updater
      containers:
      - name: ecr-cred-helper
        image: {{ .Values.aws.ecr.helperImage }}
        env:
        - name: AWS_ACCESS_KEY_ID
          value: "{{ .Values.aws.ecr.accessKey }}"
        - name: AWS_SECRET_ACCESS_KEY
          value: "{{ .Values.aws.ecr.secretKey }}"
        - name: AWS_REGION
          value: "{{ .Values.aws.ecr.region }}"
        - name: AWS_ACCOUNT
          value: "{{ .Values.aws.ecr.registryId }}"
        - name: SECRET_NAME
          value: "aws-ecr-credentials"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        command:
        - /bin/sh
        - '-c'
        - |
          set -e
          ECR_TOKEN=$(aws ecr get-login-password --region "${AWS_REGION}" 2>&1)
          
          # Delete existing secret if it exists
          kubectl delete secret --ignore-not-found ${SECRET_NAME} -n ${NAMESPACE}
          
          # Create new secret with fresh token
          kubectl create secret docker-registry ${SECRET_NAME} \
            --docker-server=https://${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com \
            --docker-username=AWS \
            --docker-password="${ECR_TOKEN}" \
            -n ${NAMESPACE}
            
          echo "AWS Region: ${AWS_REGION}"
          echo "Secret name: ${SECRET_NAME}"
          echo "Secret was successfully updated at $(date)"
      restartPolicy: OnFailure
  ttlSecondsAfterFinished: 300
{{- end }}
